#!/usr/bin/env python

import argparse
import json
import os
import sys

parser = argparse.ArgumentParser(description="Find any and all files matching '*/tests/*py' in the current directory tree, and run them as nanotest-py tests.")
parser.add_argument("-j", "--json", action="store_true", help ="Dump all test results to STDOUT as JSON (disables other output; result will be an empty list if no tests are found)")
parser.add_argument("-s", "--silent", action="store_true", help ="Output nothing at all, indicating test failure by return code (0: success, 1: failure, 2: no tests found)")
parser.add_argument("-v", '--version', action='version', version='%(prog)s 2.0.0')
parser.add_argument('testfiles', metavar="TEST", nargs="*",  help="Execute specified test files instead of searching tree")
args = parser.parse_args()
if args.silent:
    args.quiet = True

sys.path.append('./')
results       = []
testfiles     = args.testfiles
inittestcount = len(testfiles)
rc = 0


for root, dirs, files in os.walk("."):
    # walk pwd tree to find tests and modules
    for f in sorted(files):
        if f[-3:] == ".py":
            if inittestcount == 0 and root[-6:] == "/tests":
                testfiles.append(os.path.join(root,f))
            else:
                sys.path.append(os.path.join(root,f))
if len(testfiles) == 0:
    if not args.silent or args.json:
        print("No tests found; nothing to do.")
    if args.json:
        print(json.dumps(results))
    os.exit(2)


for test in testfiles:
    teststr = ''
    # open each test file and read it in
    try:
        f = open(testfile, 'r')
    except Exception as err:
        msg = "could not open: {}".format(err)
        results.append({'run': False, 'msg': msg, 'tests': None})
        continue
    teststr = f.read()
    # compile file contents to code object
    try:
        testcode = compile(teststr, test, "exec")
    except Exception as err:
        msg = "tests failed to compile: {}".format(err)
        results.append({'run': False, 'msg':msg , 'tests': None})
        continue        
    # run tests and stow results
    testcontext = {}
    try:
        exec(testcode, testcontext)
    except Exception as err:
        msg = "tests failed to run: {}".format(err)
        results.append({'passed': False, 'msg':msg , 'tests': None})
        continue
    results.append({'run': True, 'msg': None, 'tests': testcontext['n']['results']})

if args.json:
    print(json.dumps(results))
else:
    rc = process_results()
sys.exit(rc)


def process_results():
    for result in results:
        numtests = len(result["tests"])
        if not result["run"]: rc = 1
        if not args.silent: 
            print(result[0]["filename"],)
            if not result["run"]:
                print("SCRIPT FAILURE: {}".format(msg),)
                continue
            passing, output = process_tests(result["tests"])
            print("{}/{} passing".format(passing, numtests),)
            if passing == numtests:
                print("ok",)
            else:
                print("FAIL",)
            print(output)
    return rc


def print_result(tests):
    testnum = 0
    passing = 0
    output  = "\n"
    for t in tests:
        testnum += 1
        if t["pass"]:
            passing += 1
        else:
            output += "   Test {} ({} line {}, {}) failed\n".format(testnum, t["file"], t["line"], t["msg"])
            output += "      expected: '{}'\n".format(t["xpect"])
            output += "      got:      '{}'\n".format(t["got"])
    return passing, output

