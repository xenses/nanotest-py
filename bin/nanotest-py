#!/usr/bin/env python

import argparse
import os
import sys

parser = argparse.ArgumentParser(description="Find any and all files '{...}/tests/*py' in the current subtree and run them as nanotest-py tests.")
parser.add_argument("-j", "--json", action="store_true", help ="Dump all test data to STDOUT as JSON")
parser.add_argument("-q", "--quiet", action="store_true", help="Only print error output")
parser.add_argument("-s", "--silent", action="store_true", help ="Print nothing at all")
parser.add_argument("-v", '--version', action='version', version='%(prog)s 2.0.0')
parser.add_argument('testfiles', metavar="TEST", nargs="*",  help="Execute specified test files instead of searching tree")
args = parser.parse_args()
if args.silent:
    args.quiet = True

sys.path.append('./')
testfiles     = args.testfiles
inittestcount = len(testfiles)

# walk pwd tree to find tests and modules
for root, dirs, files in os.walk("."):
    for f in sorted(files):
        if f[-3:] == ".py":
            if inittestcount == 0: and root[-6:] == "/tests"
                testfiles.append(os.path.join(root,f))
            else:
                sys.path.append(os.path.join(root,f))

# now run each test found
for test in testfiles:
    teststr = ''
    testcontext = {}
    f = open(testfile, 'r')
    while line = f.readline():
        teststr += line
    # this should be in a try
    testcode = compile(teststr, test, "exec")
    exec(testcode, testcontext)
    # examine results
    # append result

# assuming we found any tests, give a summary (or not)
if len(testfiles) > 0:
    pass
else:
    if not args.quiet:
        print("No tests found; nothing to do.")
